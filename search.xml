<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GTX Eye Scan]]></title>
    <url>%2F2019%2F08%2F14%2FGTX%20Eye%20Scan%2F</url>
    <content type="text"><![CDATA[属性及寄存器 ES_VERT_OFFSET范围是-127~+127. 注意这个数据不是二进制补码的形式ES_VERT_OFFSET[6:0] 代表数据绝对值，0-127ES_VERT_OFFSET[7]代表数据的符号，1代表负数，0代表正数ES_VERT_OFFSET[8] 代表UT的符号，在DFE模式中会用到。LPM模式中，设置为0 ES_HORZ_OFFSET根据RXOUT_DIV不通，范围也不一样RXOUT_DIV=1(Full) -32 (11’b11111100000) +0(11’b00000000000) +32(11’b00000100000)RXOUT_DIV=1(Half) -64 (11’b11111000000) +0(11’b00000000000) +64(11’b00001000000)RXOUT_DIV=1(Qrtr) -128 (11’b11110000000) +0(11’b00000000000) +128(11’b00010000000)RXOUT_DIV=1(Octal) -256 (11’b11100000000) +0(11’b00000000000) +256(11’b00100000000)RXOUT_DIV=1(Hex) -512 (11’b11000000000) +0(11’b00000000000) +512(11’b01000000000) 操作步骤 Step0初始化GTX时候，把PMA_RSV2[5]=1，使能eye scan物理模块。如果通过code使能，那么PMA部分需要复位一次。 Step1根据RXOUT_DIV确定ES_HORZ_OFFSET的范围。RXOUT_DIV可以通过UG476 Table4-20确定 Step2配置GTX，包括EQ及AGC。选择使用LPM模式或是DFE模式，若是DFE模式，一个点要扫描两次，ES_VERT_OFFSET[8]，即UT=1与UT=0各要扫描一次。 Step3根据数据bus宽度的不通，需要告知eye scan模块比较哪些bit的数据，这是ES_SDATA_MASK 及ES_QUAL_MASK决定的。ES_QUAL_MASK用于忽略掉一些特殊的pattern，例如K28.5.实际使用中，常常设置 1ES_QUAL_MASK=&#123;160&#123;1'b1&#125;&#125; 即不忽略任何pattern。这个时候，ES_QUALIFIER也就无所谓了。 ES_SDATA_MASK需要根据GTX内部bus宽度决定，例如 1234ES_SDATA_MASK = &#123;&#123;40&#123;1'b1&#125;&#125;, &#123;40&#123;1'b0&#125;&#125;&#125;; //40-bit widthES_SDATA_MASK = &#123;&#123;40&#123;1'b1&#125;&#125;, &#123;32&#123;1'b0&#125;&#125;, &#123;8&#123;1'b1&#125;&#125;&#125;; //32-bit widthES_SDATA_MASK = &#123;&#123;40&#123;1'b1&#125;&#125;, &#123;20&#123;1'b0&#125;&#125;,&#123;20&#123;1'b1&#125;&#125;&#125;; //20-bit widthES_SDATA_MASK = &#123;&#123;40&#123;1'b1&#125;&#125;, &#123;16&#123;1'b0&#125;&#125;,&#123;24&#123;1'b1&#125;&#125;&#125;； //16-bit width Step4开始扫描。设置如下参数ES_CONTROL [5:0] = 6b000000ES_EYE_SCAN_EN = 1b1 使能eye scan功能ES_ERRDET_EN = 1b1 使能 error detection，如果偏移采样的结果与实际恢复数据不一致，SDATA的对应bit会变成1ES_PRESCALE 用于设置期望的误码率，可以从一个比较小的值开始，比如4 Step5确定水平及垂直方向采样的步长，例如hstepSize=8，vstepSize=8.然后再设置采样位置ES_VERT_OFFSET及ES_HORZ_OFFSET。水平方向ES_HORZ_OFFSET是一个二进制补码的符号数，需要注意的是范围不要超出，另外中心点的位置数据是ES_HORZ_OFFSET[10]=1&#39;b0 Step6将状态机置于RESET模式。RUN bit置为1 123ES_CONTROL = 6b000001;ES_ERRDET_EN = 1'b1;ES_EYE_SCAN_EN = 1'b1; Step7读取ES_CONTROL_STATUS寄存器，检查状态机是否回到了END状态。如果到了END状态， ES_CONTROL_STATUS[0]=1&#39;b1且ES_CONTROL_STATUS[3:1]=3&#39;b010如果ES_CONTROL_STATUS==6，则状态机仍然处于COUN计数状态 Step8将状态机置于WAIT状态 1ES_CONTROL [5:0] = 6b000000 Step9读取刚扫描点的错误数（es_error_count）及采样的总数（es_sample_count）。 需要特别注意的是，如果ES_VERT_OFFSET及ES_HORZ_OFFSET都为0.及采样的是中心点，那么ES_ERROR_COUNT一定为0.如果此时读出的ES_ERROR_COUNT不为0，那么证明eye scan模块的alignment有问题，需要重新进做alignment。做alignment的步骤如下 1234ES_HORZ_OFFSET = x880 EYESCANRESET = 1ES_HORZ_OFFSET = x800EYESCANRESET = 0 Step10如果是LPM模式，误码率计算如下回到Step5开始下一点的采样，直到完成整个区域的遍历。如果是DFE模式，记录下当前的es_error_count0及es_sample_count0.然后改变仅仅改变UT的符号，回到Step6，重新再扫描一次，得到新的es_error_count1及es_sample_count1.计算DFE模式下的BER再回到Step5，开始下一个点的采样。]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>Kintex7</tag>
        <tag>GTX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo使用DisqusJS评论系统]]></title>
    <url>%2F2019%2F07%2F29%2FHexo%E4%BD%BF%E7%94%A8DisqusJS%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[由于一些不可描述的原因，在这片神奇的土地上无法直接访问Disqus，因此如果要体验一下使用得最广的Disqus评论系统，在配置上需要做一些简单的调整。以Hexo里Next主题为例，其它主题的配置也是类似的。打开next主题配置文件，找到disqusjs部分，发现有api，apikey, shortname三个内容需要填写 12345678910111213# DisqusJS# Alternative Disqus - Render comment component using Disqus API.# Demo: https://suka.js.org/DisqusJS/disqusjs: enable: true # API Endpoint of Disqus API (https://disqus.com/api/). # Leave api empty if you are able to connect to Disqus API. # Otherwise you need a reverse proxy for Disqus API. # For example: # api: https://disqus.skk.moe/disqus/ api: apikey: shortname: api部分由于大部分人都不能以正常途径访问disqus，因此api的部分需要填写一个代理服务器的地址，可以使用DisqusJS作者提供的代理，也可以在自己VPS上创建一个代理。以 nginx 为例，在你的站点配置中添加一行： 123location /disqus/ &#123; proxy_pass https://disqus.com/;&#125; 然后重启nginx 1service nginx reload 打开https://你的域名/disqus/api/3.0/threads/list.json ，如果返回的内容如下 1&#123;"code":5,"response":"Invalid API key"&#125; 则说明代理配置成功。然后在_config.yml文件中，api就可以填写成 12345678disqusjs: enable: true # API Endpoint of Disqus API (https://disqus.com/api/). # Leave api empty if you are able to connect to Disqus API. # Otherwise you need a reverse proxy for Disqus API. # For example: # api: https://disqus.skk.moe/disqus/ api: https://你的域名/disqus/api/ 配置 Disqus Application首先在Disqus API Application 处注册一个 Application.然后就可以获得API key同时需要在 Application 的 Settings 页面设置你的域名，如果怕麻烦直接填入disqus.com即可。 注册一个disqus账户进入Disqus主页，点击GET STARTED然后选择安装Disqus到自己的网站输入自己的名称，可以随意，下面提示的内容，即是后续的shortname。后续根据提示完成注册即可。 完成重新部署一下，就可以显示评论了，但是如果网页的访问者没有办法访问Disqus网页，他也没有办法发表评论，只能显示“评论基础模式”。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>DisqusJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Apache的SVN服务器搭建]]></title>
    <url>%2F2018%2F05%2F26%2F%E5%9F%BA%E4%BA%8EApache%E7%9A%84SVN%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[基于ubuntu18.04lts 安装123apt install subversion apache2 libapache2-mod-svna2enmod dav_svn # enable dav_svn Apache modulea2enmod authz_svn # enable the authz_svn module 建立SVN repo123svnadmin create /home/svn/test_repochown -R www-data:www-data /home/svn/test_repovim /home/svn/test_repo/conf/authz 编辑authz文件设置权限，文件如下 12345678910111213[groups]team = testuser1devteam = testuser1, testuser2[/]@team = r@devteam = rwtestuser1 = rw[/wowapp/trunk]@team = r@devteam = rwtestuser2 = r 创建svn用户1234htpasswd -cB /etc/apache2/subversion-auth testuser1 #第一次创建用户，同时创建文件htpasswd -B /etc/apache2/subversion-auth testuser2 #后续用户chgrp www-data /etc/apache2/subversion-authchmod 660 /etc/apache2/subversion-auth 配置Apache配置端口号1vim /etc/apache2/ports.conf 使用编辑默认文件1vim /etc/apache2/sites-available/000-default.conf 在virtualhost之间加入 123456789&lt;Location /svn&gt; DAV svn SVNParentPath /home/svn AuthType Basic AuthName &quot;Your repository name&quot; AuthUserFile /etc/apache2/subversion-auth AuthzSVNAccessFile /home/svn/test_repo/conf/authz Require valid-user&lt;/Location&gt; 并且改端口号 1&lt;VirtualHost *:8079&gt; 1systemctl status apache2.service 配置nginx代理12345678910111213141516location /svn/ &#123; proxy_pass http://localhost:8079/svn/; proxy_redirect http://localhost:8079/ https://epdoc.top/; #nginx在做反向代理到后端服务器，如果后端服务器有重定向，会出现返回服务器的ip地址，解决办法： #proxy_set_header Host $host; #proxy_set_header X-Real-IP $remote_addr; #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; #proxy_max_temp_file_size 0; #proxy_connect_timeout 90; #proxy_send_timeout 90; #proxy_read_timeout 90; #proxy_buffer_size 4k; #proxy_buffers 4 32k; #proxy_busy_buffers_size 64k; #proxy_temp_file_write_size 64k; &#125; 注意：SVN服务自身不需要配置、启动什么的 参考 https://www.tecmint.com/install-apache-subversion-svn-tortoisesvn-centos-debian-ubuntu/ https://help.ubuntu.com/lts/serverguide/subversion.html.en https://velusaravana.wordpress.com/2013/10/03/invalid-command-authzsvnaccessfile-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration/]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OneDrive备份同步任意文件夹]]></title>
    <url>%2F2018%2F01%2F23%2FOneDrive%E5%A4%87%E4%BB%BD%E5%90%8C%E6%AD%A5%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%A4%B9%2F</url>
    <content type="text"><![CDATA[比如我需要将F:\test_folder同步到D:\OneDrive\Sync\目录下 首先在到D:\OneDrive，创建Sync文件夹 打开命令行，创建一个硬链接 1mklink /d "D:\OneDriv\Sync\test_folder" F:\test_folder 即可。F:\test_folder内容会自动同步上去 如果删除D:\OneDriv\Sync下面的test_folder文件夹，不会影响到F:\test_folder文件夹，因为D:\OneDriv\Sync\test_folder只是一个链接而已。但是删除后会把云盘里面的内容也删掉]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>默认</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[root用户访问文件被拒绝]]></title>
    <url>%2F2017%2F07%2F28%2Froot%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E8%A2%AB%E6%8B%92%E7%BB%9D%2F</url>
    <content type="text"><![CDATA[有时候在linux系统中尝试删除或者修改某个文件时候，会被拒绝，即使是使用了root权限。这很可能是因为在文件的扩展属性中设置了immutable标记。如下所示 123456789root@localhost:~# touch immutable-fileroot@localhost:~# chattr +i immutableroot@localhost:~# ll immutable-file-rw-r--r-- 1 root root 0 Jul 28 08:07 immutable-fileroot@localhost:~# lsattr immutable-file----i--------e-- immutable-fileroot@localhost:~# rm -f immutable-filerm: cannot remove 'immutable-file': Operation not permittedroot@localhost:~# 可以用以下方法解决 12345root@localhost:~# chattr -i immutable-fileroot@localhost:~# lsattr immutable-file-------------e-- immutable-fileroot@localhost:~# rm -f immutable-fileroot@localhost:~#]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo插入本地图片]]></title>
    <url>%2F2016%2F12%2F28%2FHexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[安装插件1npm install hexo-asset-image 打开配置改配置项打开之后，以后使用hexo new &quot;新的一篇文章&quot;命令新建博客的时候，都会在新的一篇文章.md的文件目录下创建一个同名的新的一篇文章文件夹。我们需要把待插入文章的图片预先放在这个文件夹中。如果有的文章没有图片，也不想被hexo自动创建这个空的文件夹，可以手动在source/_post/目录下，手动创建一个md文件 插入文件在需要插入的图片的位置，使用如下命令即可。注意图片的命名不能有空格。 1![这是一个图片](./测试图片.png) 使用这种方式插入的图片，由于路径的差异，在markdown的编辑器中没有办法正常显示，但是不影响hexo本地预览及部署。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客]]></title>
    <url>%2F2016%2F12%2F27%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo是基于Node.js的一个快速、简洁且高效的静态博客框架，它的主要特点应该就是支持Markdown语言了，这对于有码字需求的程序员来说，就可以不用借助外部工具，实现代码的完美显示。 本地安装Hexo使用环境Hexo分为本地端与服务器两个部分，所有的书写内容都在本地端基于Markdown语言完成，经过类似于编译的步骤后，再使用git工具部署到远端的服务器，从而实现内容的显示。 安装Git下载符合自己操作系统的版本，根据提示安装即可，完成后，打开Git Bash，输入git version命令，能正确显示版本号即安装成功。 然后进行一些初始化设置 12git config --global user.name "用户名"git config --global user.email "邮箱地址" 最后生成一对部署时候git commit到服务器的ssh密钥。如果是在windows下面执行，需要先设置好HOME环境变量，生成的密钥就在HOME变量指向的文件夹内。生产密钥的命令如下: 1ssh-keygen -t rsa -C "邮箱地址" 如果有需要，也可以输入密码对这个密钥进行加密，如果设置了密码，后续每一次deploy的时候都需要输入密码。 使用一下的命令查看查看公钥，后续需要把这个公钥复制到deploy的服务器上 1cat ~/.ssh/id_rsa.pub 安装Node.js直接根据自己操作系统版本下载安装即可。 安装Hexo打开Git Bash，输入下面命令安装Hexo 1npm install hexo-cli -g 待安装完成后，在适当的位置创建一个文件夹（例如hexo），后续所有本地的博客源文件，包括hexo的配置文件，都在这个文件夹内。在刚创建的hexo文件夹内，打开Git Bash，输入下面命令对文件夹结构进行初始化。 12hexo initnpm install 完成后，文件夹的结果如下图所示至此，Hexo本地端安装完毕，后续根据需要会继续安装一些插件及修改Hexo的配置。 部署到Github在本地完成的写作内容，经过hexo generate之后，会在public文件夹中生产html网页文件，而部署的过程，就相当于把这些生成的文件发布到web服务器中，提供给用户访问。Github提供了一个类似的web服务器，大家无需申请域名即可发布自己的博客内容。部署到Github的方法如下。 创建一个repo登录Github，创建一个名为xxx.gihub.io的repo。需要注意的事，这里xxx部分需用与自己github账号同名。比如Github用户名是kirka，那么需要创建的repo名称为krika.githu.io。创建完成后，打开github设置页面，添加之前创建的SSH公钥进去。 测试连接输入ssh -T git@github.com命令，测试与Github的连接，输出如下代表连接正常。 完成部署打开Hexo的配置文件_config.yml，在文件最后deploy部分加入如下内容。 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:用户名/用户名.github.io branch: master 然后直接使用hexo d命令完成部署。 最后，你就拥有了一个地址为http://用户名.github.io的个人网站。 部署到自己的服务器如果你拥有自己的VPS服务器及域名，并且已经做好了DNS解析，也可以按照如下步骤将博客内容部署到自己的服务器上。 安装Git以root用户，使用SSH等方式登录到自己服务器，以Ubutu为例，执行apt install git命令安装git。 创建git用户为了安全，需要在vps新建一个专门的用户来完成git部署过程，用户名可以任意，以下以git为例进行说明。输入以下命令根据提示输入密码。 1adduser git 用于只需要使用改git用户完成部署，为了安全我们可以关闭git用户的shell权限。 1vim /etc/passwd 找到刚新加的git用户，将原本的 1git:x:1000:1000:,,,:/home/git:/bin/bash 改为 1git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell 并保存退出。 配置git仓库以下命令都通过root用户执行。 1234cd /home/git mkdir blog.git //创建git仓库文件夹，以blog.git为例cd blog.gitgit init --bare //使用--bare参数初始化为裸仓库 接下来，为了使本地客户端能够正常的登录到vps，同样需要把本地端生成的ssh公钥复制到vps中。 123cd /home/gitmkdir .sshvim .ssh/authorized_keys 将本地的公钥内容复制到authorized_keys文件中，再保存退出。最后使用下面命令刚刚root创建的所有文件权限转移到git。 1chown -R git:git /home/git 安装Nginx用于Ubuntu 16.04源中带的Nginx不是最新的，我们直接从官网安装最新的Nginx。 12wget http://nginx.org/keys/nginx_signing.keyapt-key add nginx_signing.key 在 /etc/apt/sources.list 文件中加入下面两行： 12deb http://nginx.org/packages/ubuntu/ xenial nginxdeb-src http://nginx.org/packages/ubuntu/ xenial nginx 然后再安装 12apt updateapt install nginx 安装完成后，创建一个文件夹，用于存放发布的网页文件。 1mkdir /var/www/blog 然后对Nginx进行配置 1vim /etc/nginx/conf.d/default.conf 参考输入以下内容，需要注意的是，我这里使用了http传输，并且把所有的http连接自动转为https。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748server &#123; listen 80; server_name lyth.cf; rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;&#125;server &#123; listen 443 ssl; server_name lyth.cf; root /var/www/blog; index index.html index.htm index.nginx-debian.html; ssl_certificate /etc/nginx/ssl/lyth.cf/fullchain.cer; ssl_certificate_key /etc/nginx/ssl/lyth.cf/lyth.cf.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; ssl_session_cache builtin:1000 shared:SSL:10m; # openssl dhparam -out /usr/local/nginx/conf/ssl/dhparam.pem 2048 ssl_dhparam /etc/nginx/ssl/dhparam.pem; access_log /var/log/nginx/blog_access.log; error_log /var/log/nginx/blog_error.log; error_page 404 = /404.html; location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123; root /var/www/blog; access_log off; expires 1d; &#125; location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123; root /var/www/blog; access_log off; expires 10m; &#125; location / &#123; root /var/www/blog; if (-f $request_filename) &#123; rewrite ^/(.*)$ /$1 break; &#125; &#125; location /nginx_status &#123; stub_status on; access_log off; &#125;&#125; 设置权限，启动Nginx 123chown -R git:git /var/www/blogsystemctl start nginxsystemctl enable nginx //开机自动启动 配置Git Hooks在上面的步骤完成后，本地端deploy的文件只是存在了VPS的repo里，还需要配置好一个hook文件，在本地端deploy之后，git会自动将网页导入到/var/www/blog目录中。 1vim /home/git/blog.git/hooks/post-receive 复制以下内容到post-receive文件中 12345678#!/bin/bashGIT_REPO=/home/git/blog.gitTMP_GIT_CLONE=/tmp/blogPUBLIC_WWW=/var/www/blogrm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; 保存退出，再执行 12chmod +x /home/git/blog.git/hooks/post-receivechown git:git /home/git/blog.git/hooks/post-receive 至此，VPS端的配置已经全部结束。 本地操作打开Hexo的配置文件_config.yml，在文件最后deploy部分加入如下内容。 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:用户名/用户名.github.io branch: master- type: git repo: git@lyth.cf:blog.git branch: master 然后直接使用hexo d命令完成部署。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F12%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[这是一篇需要密码才能访问的文章~ Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>默认</tag>
      </tags>
  </entry>
</search>
