<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GTX Eye Scan]]></title>
    <url>%2F2019%2F08%2F14%2FGTX%20Eye%20Scan%2F</url>
    <content type="text"><![CDATA[属性及寄存器 ES_VERT_OFFSET范围是-127~+127. 注意这个数据不是二进制补码的形式ES_VERT_OFFSET[6:0] 代表数据绝对值，0-127ES_VERT_OFFSET[7]代表数据的符号，1代表负数，0代表正数ES_VERT_OFFSET[8] 代表UT的符号，在DFE模式中会用到。LPM模式中，设置为0 ES_HORZ_OFFSET根据RXOUT_DIV不通，范围也不一样，ES_HORZ_OFFSET[10:0]的取值范围如下：RXOUT_DIV=1(Full) -32 (11’b11111100000) +0(11’b00000000000) +32(11’b00000100000)RXOUT_DIV=2(Half) -64 (11’b11111000000) +0(11’b00000000000) +64(11’b00001000000)RXOUT_DIV=4(Qrtr) -128 (11’b11110000000) +0(11’b00000000000) +128(11’b00010000000)RXOUT_DIV=8(Octal) -256 (11’b11100000000) +0(11’b00000000000) +256(11’b00100000000)RXOUT_DIV=16(Hex) -512 (11’b11000000000) +0(11’b00000000000) +512(11’b01000000000)ES_HORZ_OFFSET[11]取值如下：ES_HORZ_OFFSET[11]=1’b0; //datarate &lt; 10GbpsES_HORZ_OFFSET[11]=1’b1; //datarate &gt;= 10Gbps 操作步骤 Step0初始化GTX时候，把PMA_RSV2[5]=1，使能eye scan物理模块。如果通过code使能，那么PMA部分需要复位一次。 Step1根据RXOUT_DIV确定ES_HORZ_OFFSET的范围。RXOUT_DIV可以通过UG476 Table4-20确定 Step2配置GTX，包括EQ及AGC。选择使用LPM模式或是DFE模式，若是DFE模式，一个点要扫描两次，ES_VERT_OFFSET[8]，即UT=1与UT=0各要扫描一次。 Step3根据数据bus宽度的不同，需要告知eye scan模块比较哪些bit的数据，这是ES_SDATA_MASK 及ES_QUAL_MASK决定的。ES_QUAL_MASK用于忽略掉一些特殊的pattern，例如K28.5.实际使用中，常常设置 1ES_QUAL_MASK=&#123;80&#123;1'b1&#125;&#125; 即不忽略任何pattern。这个时候，ES_QUALIFIER也就无所谓了。 ES_SDATA_MASK需要根据GTX内部bus宽度决定，例如 1234ES_SDATA_MASK = &#123;&#123;40&#123;1'b1&#125;&#125;, &#123;40&#123;1'b0&#125;&#125;&#125;; //40-bit widthES_SDATA_MASK = &#123;&#123;40&#123;1'b1&#125;&#125;, &#123;32&#123;1'b0&#125;&#125;, &#123;8&#123;1'b1&#125;&#125;&#125;; //32-bit widthES_SDATA_MASK = &#123;&#123;40&#123;1'b1&#125;&#125;, &#123;20&#123;1'b0&#125;&#125;,&#123;20&#123;1'b1&#125;&#125;&#125;; //20-bit widthES_SDATA_MASK = &#123;&#123;40&#123;1'b1&#125;&#125;, &#123;16&#123;1'b0&#125;&#125;,&#123;24&#123;1'b1&#125;&#125;&#125;； //16-bit width Step4开始扫描。设置如下参数ES_CONTROL [5:0] = 6’b000000ES_EYE_SCAN_EN = 1b1 使能eye scan功能ES_ERRDET_EN = 1b1 使能 error detection，如果偏移采样的结果与实际恢复数据不一致，SDATA的对应bit会变成1ES_PRESCALE 用于设置期望的误码率，可以从一个比较小的值开始，比如4 Step5确定水平及垂直方向采样的步长，例如hstepSize=8，vstepSize=8.然后再设置采样位置ES_VERT_OFFSET及ES_HORZ_OFFSET。水平方向ES_HORZ_OFFSET是一个二进制补码的符号数，需要注意的是范围不要超出，另外中心点的位置数据是ES_HORZ_OFFSET[10]=1&#39;b0 Step6将状态机置于RESET模式。RUN bit置为1 123ES_CONTROL = 6'b000001;ES_ERRDET_EN = 1'b1;ES_EYE_SCAN_EN = 1'b1; Step7读取ES_CONTROL_STATUS寄存器，检查状态机是否回到了END状态。如果到了END状态， ES_CONTROL_STATUS[0]=1&#39;b1且ES_CONTROL_STATUS[3:1]=3&#39;b010如果ES_CONTROL_STATUS==6，则状态机仍然处于COUN计数状态 Step8将状态机置于WAIT状态 1ES_CONTROL [5:0] = 6'b000000; Step9读取刚扫描点的错误数（es_error_count）及采样的总数（es_sample_count）。 需要特别注意的是，如果ES_VERT_OFFSET及ES_HORZ_OFFSET都为0.及采样的是中心点，那么ES_ERROR_COUNT一定为0.如果此时读出的ES_ERROR_COUNT不为0，那么证明eye scan模块的alignment有问题，需要重新进做alignment。做alignment的步骤如下 1234ES_HORZ_OFFSET = 0x880 EYESCANRESET = 1ES_HORZ_OFFSET = 0x800EYESCANRESET = 0 Step10如果是LPM模式，误码率计算如下回到Step5开始下一点的采样，直到完成整个区域的遍历。如果是DFE模式，记录下当前的es_error_count0及es_sample_count0.然后改变仅仅改变UT的符号，回到Step6，重新再扫描一次，得到新的es_error_count1及es_sample_count1.计算DFE模式下的BER再回到Step5，开始下一个点的采样。]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>Kintex7</tag>
        <tag>GTX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo使用DisqusJS评论系统]]></title>
    <url>%2F2019%2F07%2F29%2FHexo%E4%BD%BF%E7%94%A8DisqusJS%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[由于一些不可描述的原因，在这片神奇的土地上无法直接访问Disqus，因此如果要体验一下使用得最广的Disqus评论系统，在配置上需要做一些简单的调整。以Hexo里Next主题为例，其它主题的配置也是类似的。打开next主题配置文件，找到disqusjs部分，发现有api，apikey, shortname三个内容需要填写 12345678910111213# DisqusJS# Alternative Disqus - Render comment component using Disqus API.# Demo: https://suka.js.org/DisqusJS/disqusjs: enable: true # API Endpoint of Disqus API (https://disqus.com/api/). # Leave api empty if you are able to connect to Disqus API. # Otherwise you need a reverse proxy for Disqus API. # For example: # api: https://disqus.skk.moe/disqus/ api: apikey: shortname: api部分由于大部分人都不能以正常途径访问disqus，因此api的部分需要填写一个代理服务器的地址，可以使用DisqusJS作者提供的代理，也可以在自己VPS上创建一个代理。以 nginx 为例，在你的站点配置中添加一行： 123location /disqus/ &#123; proxy_pass https://disqus.com/;&#125; 然后重启nginx 1service nginx reload 打开https://你的域名/disqus/api/3.0/threads/list.json ，如果返回的内容如下 1&#123;"code":5,"response":"Invalid API key"&#125; 则说明代理配置成功。然后在_config.yml文件中，api就可以填写成 12345678disqusjs: enable: true # API Endpoint of Disqus API (https://disqus.com/api/). # Leave api empty if you are able to connect to Disqus API. # Otherwise you need a reverse proxy for Disqus API. # For example: # api: https://disqus.skk.moe/disqus/ api: https://你的域名/disqus/api/ 配置 Disqus Application首先在Disqus API Application 处注册一个 Application.然后就可以获得API key同时需要在 Application 的 Settings 页面设置你的域名，如果怕麻烦直接填入disqus.com即可。 注册一个disqus账户进入Disqus主页，点击GET STARTED然后选择安装Disqus到自己的网站输入自己的名称，可以随意，下面提示的内容，即是后续的shortname。后续根据提示完成注册即可。 完成重新部署一下，就可以显示评论了，但是如果网页的访问者没有办法访问Disqus网页，他也没有办法发表评论，只能显示“评论基础模式”。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>DisqusJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Apache的SVN服务器搭建]]></title>
    <url>%2F2018%2F05%2F26%2F%E5%9F%BA%E4%BA%8EApache%E7%9A%84SVN%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[基于ubuntu18.04lts 安装123apt install subversion apache2 libapache2-mod-svna2enmod dav_svn # enable dav_svn Apache modulea2enmod authz_svn # enable the authz_svn module 建立SVN repo123svnadmin create /home/svn/test_repochown -R www-data:www-data /home/svn/test_repovim /home/svn/test_repo/conf/authz 编辑authz文件设置权限，文件如下 12345678910111213[groups]team = testuser1devteam = testuser1, testuser2[/]@team = r@devteam = rwtestuser1 = rw[/wowapp/trunk]@team = r@devteam = rwtestuser2 = r 创建svn用户1234htpasswd -cB /etc/apache2/subversion-auth testuser1 #第一次创建用户，同时创建文件htpasswd -B /etc/apache2/subversion-auth testuser2 #后续用户chgrp www-data /etc/apache2/subversion-authchmod 660 /etc/apache2/subversion-auth 配置Apache配置端口号1vim /etc/apache2/ports.conf 使用编辑默认文件1vim /etc/apache2/sites-available/000-default.conf 在virtualhost之间加入 123456789&lt;Location /svn&gt; DAV svn SVNParentPath /home/svn AuthType Basic AuthName &quot;Your repository name&quot; AuthUserFile /etc/apache2/subversion-auth AuthzSVNAccessFile /home/svn/test_repo/conf/authz Require valid-user&lt;/Location&gt; 并且改端口号 1&lt;VirtualHost *:8079&gt; 1systemctl status apache2.service 配置nginx代理12345678910111213141516location /svn/ &#123; proxy_pass http://localhost:8079/svn/; proxy_redirect http://localhost:8079/ https://epdoc.top/; #nginx在做反向代理到后端服务器，如果后端服务器有重定向，会出现返回服务器的ip地址，解决办法： #proxy_set_header Host $host; #proxy_set_header X-Real-IP $remote_addr; #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; #proxy_max_temp_file_size 0; #proxy_connect_timeout 90; #proxy_send_timeout 90; #proxy_read_timeout 90; #proxy_buffer_size 4k; #proxy_buffers 4 32k; #proxy_busy_buffers_size 64k; #proxy_temp_file_write_size 64k; &#125; 注意：SVN服务自身不需要配置、启动什么的 参考 https://www.tecmint.com/install-apache-subversion-svn-tortoisesvn-centos-debian-ubuntu/ https://help.ubuntu.com/lts/serverguide/subversion.html.en https://velusaravana.wordpress.com/2013/10/03/invalid-command-authzsvnaccessfile-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration/]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OneDrive备份同步任意文件夹]]></title>
    <url>%2F2018%2F01%2F23%2FOneDrive%E5%A4%87%E4%BB%BD%E5%90%8C%E6%AD%A5%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%A4%B9%2F</url>
    <content type="text"><![CDATA[比如我需要将F:\test_folder同步到D:\OneDrive\Sync\目录下 首先在到D:\OneDrive，创建Sync文件夹 打开命令行，创建一个硬链接 1mklink /d "D:\OneDriv\Sync\test_folder" F:\test_folder 即可。F:\test_folder内容会自动同步上去 如果删除D:\OneDriv\Sync下面的test_folder文件夹，不会影响到F:\test_folder文件夹，因为D:\OneDriv\Sync\test_folder只是一个链接而已。但是删除后会把云盘里面的内容也删掉]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>默认</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[root用户访问文件被拒绝]]></title>
    <url>%2F2017%2F07%2F28%2Froot%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E8%A2%AB%E6%8B%92%E7%BB%9D%2F</url>
    <content type="text"><![CDATA[有时候在linux系统中尝试删除或者修改某个文件时候，会被拒绝，即使是使用了root权限。这很可能是因为在文件的扩展属性中设置了immutable标记。如下所示 123456789root@localhost:~# touch immutable-fileroot@localhost:~# chattr +i immutableroot@localhost:~# ll immutable-file-rw-r--r-- 1 root root 0 Jul 28 08:07 immutable-fileroot@localhost:~# lsattr immutable-file----i--------e-- immutable-fileroot@localhost:~# rm -f immutable-filerm: cannot remove 'immutable-file': Operation not permittedroot@localhost:~# 可以用以下方法解决 12345root@localhost:~# chattr -i immutable-fileroot@localhost:~# lsattr immutable-file-------------e-- immutable-fileroot@localhost:~# rm -f immutable-fileroot@localhost:~#]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo插入本地图片]]></title>
    <url>%2F2016%2F12%2F28%2FHexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[安装插件1npm install hexo-asset-image 打开配置改配置项打开之后，以后使用hexo new &quot;新的一篇文章&quot;命令新建博客的时候，都会在新的一篇文章.md的文件目录下创建一个同名的新的一篇文章文件夹。我们需要把待插入文章的图片预先放在这个文件夹中。如果有的文章没有图片，也不想被hexo自动创建这个空的文件夹，可以手动在source/_post/目录下，手动创建一个md文件 插入文件在需要插入的图片的位置，使用如下命令即可。注意图片的命名不能有空格。 1![这是一个图片](./测试图片.png) 使用这种方式插入的图片，由于路径的差异，在markdown的编辑器中没有办法正常显示，但是不影响hexo本地预览及部署。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客]]></title>
    <url>%2F2016%2F12%2F27%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo是基于Node.js的一个快速、简洁且高效的静态博客框架，它的主要特点应该就是支持Markdown语言了，这对于有码字需求的程序员来说，就可以不用借助外部工具，实现代码的完美显示。 本地安装Hexo使用环境Hexo分为本地端与服务器两个部分，所有的书写内容都在本地端基于Markdown语言完成，经过类似于编译的步骤后，再使用git工具部署到远端的服务器，从而实现内容的显示。 安装Git下载符合自己操作系统的版本，根据提示安装即可，完成后，打开Git Bash，输入git version命令，能正确显示版本号即安装成功。 然后进行一些初始化设置 12git config --global user.name "用户名"git config --global user.email "邮箱地址" 最后生成一对部署时候git commit到服务器的ssh密钥。如果是在windows下面执行，需要先设置好HOME环境变量，生成的密钥就在HOME变量指向的文件夹内。生产密钥的命令如下: 1ssh-keygen -t rsa -C "邮箱地址" 如果有需要，也可以输入密码对这个密钥进行加密，如果设置了密码，后续每一次deploy的时候都需要输入密码。 使用一下的命令查看查看公钥，后续需要把这个公钥复制到deploy的服务器上 1cat ~/.ssh/id_rsa.pub 安装Node.js直接根据自己操作系统版本下载安装即可。 安装Hexo打开Git Bash，输入下面命令安装Hexo 1npm install hexo-cli -g 待安装完成后，在适当的位置创建一个文件夹（例如hexo），后续所有本地的博客源文件，包括hexo的配置文件，都在这个文件夹内。在刚创建的hexo文件夹内，打开Git Bash，输入下面命令对文件夹结构进行初始化。 12hexo initnpm install 完成后，文件夹的结果如下图所示至此，Hexo本地端安装完毕，后续根据需要会继续安装一些插件及修改Hexo的配置。 部署到Github在本地完成的写作内容，经过hexo generate之后，会在public文件夹中生产html网页文件，而部署的过程，就相当于把这些生成的文件发布到web服务器中，提供给用户访问。Github提供了一个类似的web服务器，大家无需申请域名即可发布自己的博客内容。部署到Github的方法如下。 创建一个repo登录Github，创建一个名为xxx.gihub.io的repo。需要注意的事，这里xxx部分需用与自己github账号同名。比如Github用户名是kirka，那么需要创建的repo名称为krika.githu.io。创建完成后，打开github设置页面，添加之前创建的SSH公钥进去。 测试连接输入ssh -T git@github.com命令，测试与Github的连接，输出如下代表连接正常。 完成部署打开Hexo的配置文件_config.yml，在文件最后deploy部分加入如下内容。 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:用户名/用户名.github.io branch: master 然后直接使用hexo d命令完成部署。 最后，你就拥有了一个地址为http://用户名.github.io的个人网站。 部署到自己的服务器如果你拥有自己的VPS服务器及域名，并且已经做好了DNS解析，也可以按照如下步骤将博客内容部署到自己的服务器上。 安装Git以root用户，使用SSH等方式登录到自己服务器，以Ubutu为例，执行apt install git命令安装git。 创建git用户为了安全，需要在vps新建一个专门的用户来完成git部署过程，用户名可以任意，以下以git为例进行说明。输入以下命令根据提示输入密码。 1adduser git 用于只需要使用改git用户完成部署，为了安全我们可以关闭git用户的shell权限。 1vim /etc/passwd 找到刚新加的git用户，将原本的 1git:x:1000:1000:,,,:/home/git:/bin/bash 改为 1git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell 并保存退出。 配置git仓库以下命令都通过root用户执行。 1234cd /home/git mkdir blog.git //创建git仓库文件夹，以blog.git为例cd blog.gitgit init --bare //使用--bare参数初始化为裸仓库 接下来，为了使本地客户端能够正常的登录到vps，同样需要把本地端生成的ssh公钥复制到vps中。 123cd /home/gitmkdir .sshvim .ssh/authorized_keys 将本地的公钥内容复制到authorized_keys文件中，再保存退出。最后使用下面命令刚刚root创建的所有文件权限转移到git。 1chown -R git:git /home/git 安装Nginx用于Ubuntu 16.04源中带的Nginx不是最新的，我们直接从官网安装最新的Nginx。 12wget http://nginx.org/keys/nginx_signing.keyapt-key add nginx_signing.key 在 /etc/apt/sources.list 文件中加入下面两行： 12deb http://nginx.org/packages/ubuntu/ xenial nginxdeb-src http://nginx.org/packages/ubuntu/ xenial nginx 然后再安装 12apt updateapt install nginx 安装完成后，创建一个文件夹，用于存放发布的网页文件。 1mkdir /var/www/blog 然后对Nginx进行配置 1vim /etc/nginx/conf.d/default.conf 参考输入以下内容，需要注意的是，我这里使用了http传输，并且把所有的http连接自动转为https。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748server &#123; listen 80; server_name lyth.cf; rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;&#125;server &#123; listen 443 ssl; server_name lyth.cf; root /var/www/blog; index index.html index.htm index.nginx-debian.html; ssl_certificate /etc/nginx/ssl/lyth.cf/fullchain.cer; ssl_certificate_key /etc/nginx/ssl/lyth.cf/lyth.cf.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; ssl_session_cache builtin:1000 shared:SSL:10m; # openssl dhparam -out /usr/local/nginx/conf/ssl/dhparam.pem 2048 ssl_dhparam /etc/nginx/ssl/dhparam.pem; access_log /var/log/nginx/blog_access.log; error_log /var/log/nginx/blog_error.log; error_page 404 = /404.html; location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123; root /var/www/blog; access_log off; expires 1d; &#125; location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123; root /var/www/blog; access_log off; expires 10m; &#125; location / &#123; root /var/www/blog; if (-f $request_filename) &#123; rewrite ^/(.*)$ /$1 break; &#125; &#125; location /nginx_status &#123; stub_status on; access_log off; &#125;&#125; 设置权限，启动Nginx 123chown -R git:git /var/www/blogsystemctl start nginxsystemctl enable nginx //开机自动启动 配置Git Hooks在上面的步骤完成后，本地端deploy的文件只是存在了VPS的repo里，还需要配置好一个hook文件，在本地端deploy之后，git会自动将网页导入到/var/www/blog目录中。 1vim /home/git/blog.git/hooks/post-receive 复制以下内容到post-receive文件中 12345678#!/bin/bashGIT_REPO=/home/git/blog.gitTMP_GIT_CLONE=/tmp/blogPUBLIC_WWW=/var/www/blogrm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; 保存退出，再执行 12chmod +x /home/git/blog.git/hooks/post-receivechown git:git /home/git/blog.git/hooks/post-receive 至此，VPS端的配置已经全部结束。 本地操作打开Hexo的配置文件_config.yml，在文件最后deploy部分加入如下内容。 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:用户名/用户名.github.io branch: master- type: git repo: git@lyth.cf:blog.git branch: master 然后直接使用hexo d命令完成部署。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F12%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[这是一篇需要密码才能访问的文章~ Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>默认</tag>
      </tags>
  </entry>
</search>
